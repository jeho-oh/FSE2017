<?xml version="1.0"?>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<project name="Jakarta Library" default="all">

    <description>
    Builds a Java class library used by programs in the Jakarta Tool Suite.
    </description>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- Project-level properties define build parameters.	       -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- The "project" properties are used to generate other property  -->
    <!-- names and to define substitutions into project documents.     -->
    <!-- Definitions are taken from the first place where found in the -->
    <!-- following list:  (A) Command line; (B) "build.properties"     -->
    <!-- in the base directory; (C) The definitions in this file.      -->
    <!-- The command-line may be specified by a higher-level build.    -->
    <!--							       -->
    <!-- PROJECT PARAMETERS (should be defined in this file):	       -->
    <!-- * project.name ....... generate property and file names;      -->
    <!-- * project.Name ....... capitalized name for documentation;    -->
    <!-- * project.owner ...... copyright owner of this code;	       -->
    <!-- * project.title ...... capitalized title for documentation;   -->
    <!-- * project.version .... the release, state and patch level.    -->
    <!--							       -->
    <!-- PROJECT PARAMETERS (may be defined by higher-level build):    -->
    <!-- * jakarta.version .... the release, state and patch level.    -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <property name="project.name"	value="jakarta"/>
    <property name="project.Name"	value="Jakarta"/>
    <property name="project.title"	value="Jakarta Library"/>

    <property
        name="project.owner"
        value="The University of Texas at Austin"/>

    <property
        id="version"
        name="${project.name}.version"
	value="v2003.03.20"/>

    <property name="project.version"	refid="version"/>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <property name="dir.build"		value="build"/>
    <property name="dir.build.api"	value="${dir.build}/api"/>
    <property name="dir.build.classes"	value="${dir.build}/classes"/>

    <property
        name="jar.build"
	value="${dir.build}/${project.name}.jar"/>

    <property
        name="mf.build"
	value="${dir.build}/MANIFEST.MF"/>

    <property name="build.debug"	value="true"/>
    <property name="build.deprecation"	value="false"/>
    <property name="build.optimize"	value="false"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "all" target is shorthand to re-compile from scratch.     -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="all" depends="jar,javadoc"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "clean" target removes generated files *other* than those -->
    <!-- generated to define the build configuration, if any.	       -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="clean" depends="initialize">

        <patternset id="clean.patterns">
            <exclude name="**/CVS/**"/>

            <include name="**/*~"/>
            <include name="**/#*#"/>
            <include name="**/.#*"/>
            <include name="**/%*%"/>
            <include name="**/*.bak"/>
            <include name="**/*.BAK"/>
            <include name="**/*.pyc"/>
            <include name="**/*.pyo"/>
            <include name="**/core"/>
        </patternset>

	<delete includeEmptyDirs="true" quiet="true">

	    <fileset dir="${dir.build}"/>

            <fileset defaultexcludes="no" dir=".">
                <include name="**/*.log"/>
                <include name="**/*.class"/>
                <patternset refid="clean.patterns"/>
            </fileset>

	</delete>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "compile" target compiles all nested Java source files,   -->
    <!-- storing the generated class files into another directory.     -->
    <!-- It also copies any resource files to the same directory.      -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="compile" depends="prepare">

	<!-- - - - - - - - - - - - - - - - - - - -->
	<!-- Add destdir="${dir.build.classes}" when -->
	<!-- directory structure is fixed.	 -->
	<!-- - - - - - - - - - - - - - - - - - - -->

	<javac
	    classpath="${dir.build.classes}"
	    debug="${build.debug}"
	    deprecation="${build.deprecation}"
            destdir="${dir.build.classes}"
	    optimize="${build.optimize}">

	    <src path="${basedir}"/>
            <include name="**/*.java"/>
	</javac>

	<copy todir="${dir.build.classes}">
	    <fileset dir="." includes="**/*.properties"/>
	</copy>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "initialize" target calculates a set of initial dynamic build -->
    <!-- properties such as timestamps and copyrights.  It also prints an  -->
    <!-- informative message about the build.                              -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="initialize">

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- Create the time stamps for current build:                 -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<tstamp>
	    <format property="initialize.date" pattern="yyyy/MM/dd"/>
	    <format property="initialize.time" pattern="HH:mm:ss"/>
	    <format property="initialize.year" pattern="yyyy"/>
	</tstamp>

	<property
	    name="timestamp"
	    value="${initialize.date} ${initialize.time}"/>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- Calculate range of years to put into copyright notice:    -->
	<!-- * cr.alpha .......	first year source was created;	       -->
	<!-- * cr.omega .......	last year source was modified;	       -->
	<!-- * cr.range .......	range of years for copyright.	       -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<property name="cr.alpha" value="1999"/>
	<property name="cr.owner" value="${project.owner}"/>

	<condition property="cr.range" value="${cr.alpha}">
	    <equals arg1="${cr.alpha}" arg2="${initialize.year}"/>
	</condition>

	<condition property="cr.range" value="${cr.alpha}-${initialize.year}">
            <not>
                <equals arg1="${cr.alpha}" arg2="${initialize.year}"/>
            </not>
        </condition>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- Create copyright messages:                                -->
	<!-- * copyright.base ... text with year(s) and owner;         -->
	<!-- * copyright.html ... for inclusion into HTML documents;   -->
	<!-- * copyright.text ... for inclusion into text documents.   -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<property name="copyright.base" value="${cr.range} ${cr.owner}"/>
	<property name="copyright.html"	value="&#169; ${copyright.base}"/>
	<property name="copyright.text"	value="(C) ${copyright.base}"/>

	<echo level="info" message="${project.title} ${project.version}"/>
	<echo level="info" message="${copyright.text}"/>
	<echo level="info" message=""/>
	<echo level="info" message="Build begins ${timestamp}"/>

    </target>
    
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="jar" depends="compile,manifest">

        <jar
	    basedir="${dir.build.classes}"
	    jarfile="${jar.build}"
            manifest="${mf.build}"/>

	<echo level="info" message="${jar.build}" taskname="===>"/>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "manifest" target creates a manifest file for the Jar file.   -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="manifest" depends="prepare">

	<manifest file="${dir.build}/MANIFEST.MF">
	    <attribute name="Build-Timestamp"   value="${timestamp}"/>
	    <attribute name="Build-Username"    value="${user.name}"/>
	    <attribute name="Copyright-Notice"  value="${copyright.text}"/>
	</manifest>

	<echo level="info" message="${mf.build}" taskname="===>"/>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="javadoc" depends="prepare">

	<property
	    name="doc.title"
	    value="${project.title} API Documentation"/>

        <javadoc
	    access="package"
	    author="true"
	    destdir="${dir.build.api}"
	    packagenames="Jakarta.*"
	    sourcepath=".."
	    use="true"
	    useexternalfile="true"
	    version="true"
	    windowtitle="${doc.title}">

	    <bottom><![CDATA[<strong>${project.copyright}</strong>]]></bottom>
	    <doctitle><![CDATA[<h1>${doc.title}</h1>]]></doctitle>
	</javadoc>

	<echo level="info" message="${dir.build.api}" taskname="===>"/>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="prepare" depends="initialize">

	<mkdir dir="${dir.build}"/>
	<mkdir dir="${dir.build.api}"/>
	<mkdir dir="${dir.build.classes}"/>

    </target>

</project>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- Local Variables:                    -->
<!-- mode:                           XML -->
<!-- fill-column:                     79 -->
<!-- sgml-ignore-undefined-elements: nil -->
<!-- sgml-indent-data:                 t -->
<!-- sgml-indent-step:                 4 -->
<!-- End:                                -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
